#!/usr/bin/env bash

pull_image() {
    SOURCE_IMAGE="$1"

    installed_image="$(podman inspect --format '{{.Digest}}' "$SOURCE_IMAGE")"
    remote_image="$(skopeo inspect --format '{{.Digest}}' "docker://$SOURCE_IMAGE")"

    if [[ "$installed_image" == "$remote_image" ]]; then
        printf "Latest image already pulled.\n"
        exit 0
    else
        podman pull "$SOURCE_IMAGE"
    fi
}

update_store() {
    # lock_image_storage u

    if [[ ! -d .store/deep ]]; then
        # lock_root_dir u
        mkdir -p .store/deep
        # lock_root_dir l
    fi

    if [[ ! -d .store/surface ]]; then
        # lock_root_dir u
        mkdir -p .store/surface
        # lock_root_dir l
    fi

    SOURCE_IMAGE="$1"
    deployment="$2"

    # podman create --replace --name mat-tmp "$SOURCE_IMAGE"
    # CMOUNT="$(podman mount mat-tmp)"

    # cp -fa "$CMOUNT/.mat/pkgs" "/.mat/.pkgs$deployment"
    cp -fa "files" ".$deployment"

    install_path() {
        if [[ ! -f ".store/deep/${path%% *}" ]]; then
            cp -fa --update=none "${1##* }" ".store/deep/${1%% *}" 2>/dev/null || :
        fi
    }

    export -f install_path
    # export CMOUNT

    cat ".$deployment" | xargs -0 -n1 -P"$(("$(nproc --all)"**2))" \
        bash -c 'install_path "$@"' _

    unset -f install_path
    # unset CMOUNT

    # podman unmount mat-tmp
    # podman rm mat-tmp

    # lock_image_storage l
}
