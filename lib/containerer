#!/usr/bin/env bash

pull_image() {
    SOURCE_IMAGE="$1"

    installed_image="$(podman inspect --format '{{.Digest}}' "$SOURCE_IMAGE")"
    remote_image="$(skopeo inspect --format '{{.Digest}}' "docker://$SOURCE_IMAGE")"

    if [[ "$installed_image" == "$remote_image" ]]; then
        printf "Latest image already pulled.\n"
        exit 0
    else
        podman pull "$SOURCE_IMAGE"
    fi
}

update_store() {
    lock_image_storage u

    if [[ -f /.mat/.current && "$(cat /.mat/.current)" != "" ]]; then
        lock_root_dir u
        printf "Cleaning up failed packages...\n"
        cat /.mat/.current | xargs -I{} -P"$(("$(nproc --all)"/2))" \
            rm -rf /.mat/.store/{}
        echo "" > /.mat/.current
        lock_root_dir l
    fi

    if [[ ! -d /.mat/.store ]]; then
        lock_root_dir u
        mkdir -p /.mat/.store
        lock_root_dir l
    fi

    SOURCE_IMAGE="$1"
    deployment="$2"

    podman create --replace --name mat-tmp "$SOURCE_IMAGE"
    CMOUNT="$(podman mount mat-tmp)"

    cp -fa "$CMOUNT/.mat/pkgs" "/.mat/.pkgs$deployment"

    install_package() {
        package="$1"
        if [[ ! -d "/.mat/.store/$package" ]]; then
            printf "Storing package $package...\n"
            rsync -aHlx "$CMOUNT/.mat/.store/$package" /.mat/.store/ || :
        fi
    }

    export -f install_package
    export CMOUNT

    cat "/.mat/.pkgs$deployment" | grep -v "^filesystem" | xargs -n1 -P"$(("$(nproc --all)"**2))" \
        bash -c 'install_package "$@"' _

    unset -f install_package
    unset CMOUNT

    podman unmount mat-tmp
    podman rm mat-tmp

    lock_image_storage l
}
