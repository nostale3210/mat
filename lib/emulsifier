#!/usr/bin/env bash
set -oue pipefail

get_unused_packages() {
    read -ra pkg_files <<< "$(find /.mat -maxdepth 1 -type f -name ".pkgs*" | tr "\n" " ")"

    depl_pkgs="$(cat "${pkg_files[@]}" | sort -u)"
    store_pkgs="$(find /.mat/.store -maxdepth 1 -type d ! -path ".store" | cut -d/ -f3 | sort)"

    echo -e "$depl_pkgs\n$store_pkgs" | sort | uniq -u | grep -v "filesystem-.*"
}

prune_unused_packages() {
    if [[ -f /.mat/.current && "$(cat /.mat/.current)" != "" ]]; then
        failed="$(cat /.mat/.current)"
        printf "Cleaning up failed packages...\n"
        cat /.mat/.current | xargs -I{} -P"$(("$(nproc --all)"/2))" rm -rf /.mat/.store/{}
        echo "" > /.mat/.current
    fi

    prune_pkg() {
        pkg="$1"

        printf "Pruning $pkg...\n"
        echo "$pkg" >> /.mat/.current
        rm -rf "/.mat/.store/$pkg"
        sed -i "s/^$pkg//" /.mat/.current
    }

    prune_pkgs() {
        xargs -n1 -P"$(("$(nproc --all)"/2))" bash -c 'prune_pkg "$@"' _ <<< "$@"
    }

    export -f prune_pkg
    export -f prune_pkgs

    get_unused_packages | xargs -n"$(("$(nproc --all)"*2))" -P"$(("$(nproc --all)"/2))" \
        bash -c 'prune_pkgs "$@"' _

    unset -f prune_pkg
    unset -f prune_pkgs
}
