#!/usr/bin/env bash
set -oue pipefail

populate_store() {
    if [[ -f /.mat/.current && "$(cat /.mat/.current)" != "" ]]; then
        failed="$(cat /.mat/.current)"
        printf "Cleaning up $failed...\n"
        rm -rf "./.store/${failed:?}"
        echo "" > ./.current
    fi

    if [[ ! -d /.mat/.store ]]; then mkdir -p /.mat/.store || (printf "Couldn't create store." && exit 1); fi

    rpm -qa | sort > /.mat/.pkgs
    read -ra packages <<< "$(rpm -qa | tr "\n" " ")"

    for PACKAGE in "${packages[@]}"; do
        printf "Storing $PACKAGE...\n"
        if [[ ! -d "/.mat/.store/$PACKAGE" && "$PACKAGE" != "filesystem"* ]]; then
            read -ra pkg_files <<< "$(rpm -ql "$PACKAGE" | grep -v ".build-id" | tr "\n" " ")"
            echo "$PACKAGE" > /.mat/.current
            mkdir -p "/.mat/.store/$PACKAGE"

            for rpm_file_path in "${pkg_files[@]}"; do
                parent_dir="$(cut -d/ -f2 <<< "$rpm_file_path")"
                file_path="$rpm_file_path"

                if [[ "$parent_dir" =~ bin|lib|lib64 ]]; then
                    file_path="/usr$rpm_file_path"
                elif [[ "$parent_dir" =~ usr|etc ]]; then
                    :
                else
                    continue
                fi

                if [[ ! -d "$file_path" ]]; then
                    mkdir -p "/.mat/.store/$PACKAGE$(dirname "$file_path")" 2>/dev/null || :
                    ln "$file_path" "/.mat/.store/$PACKAGE$file_path" 2>/dev/null ||
                        cp -fax --update=none "$file_path" "/.mat/.store/$PACKAGE$file_path" 2>/dev/null || :
                fi
            done
            echo "" > /.mat/.current
        else
            printf "\tAlready present!\n\n"
        fi
    done
}

create_custom_content_pkg() {
    if [[ -f /.mat/.current && "$(cat /.mat/.current)" != "" ]]; then
        failed="$(cat /.mat/.current)"
        printf "Cleaning up $failed...\n"
        rm -rf "./.store/${failed:?}"
        echo "" > ./.current
    fi

    custom_content="custom_content-$(sha256sum <<< "$RANDOM" | cut -d' ' -f1)"
    printf "Storing $custom_content...\n"
    echo "$custom_content" > /.mat/.current
    mkdir -p "/.mat/.store/$custom_content/usr"
    mkdir -p "/.mat/.store/$custom_content/etc"

    cp -l --parents /usr/share/glib-2.0/schemas/*compiled* /.mat/custom_content

    kver="$(find /usr/lib/modules -maxdepth 1 -type d ! -path /usr/lib/modules | cut -d/ -f5)"
    cp -l --parents "/usr/lib/modules/$kver/initramfs.img" /.mat/custom_content

    rsync -aHlx --link-dest=../../../custom_content/usr /.mat/custom_content/usr/ "/.mat/.store/$custom_content/usr/"
    rsync -aHlx --link-dest=../../../custom_content/etc /.mat/custom_content/etc/ "/.mat/.store/$custom_content/etc/"

    read -ra bin_files <<< "$(find /.mat/.store/$custom_content/usr/bin)"
    for file_path in "${bin_files[@]}"; do
        chmod +x "$file_path"
    done

    read -ra libexec_files <<< "$(find /.mat/.store/$custom_content/usr/libexec)"
    for file_path in "${libexec_files[@]}"; do
        chmod +x "$file_path"
    done

    echo "$custom_content" >> /.mat/.pkgs
    echo "" > /.mat/.current
}
