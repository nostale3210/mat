#!/usr/bin/env bash
set -oue pipefail

for func in /usr/lib/mat/*; do
    if [[ -f "$func" ]]; then
        source "$func"
    fi
done

export PREFIX=""
CONTAINER_URL="ghcr.io/nostale3210/timesinkc-cosmic-nvidia-mat:latest"

if [[ "$*" == *"--init"* ]]; then export PREFIX="${@: -1}"; fi

if systemd-inhibit --who="mat" --what="idle" sleep 0.01 &>/dev/null && [[ "$(id -u)" == "0" ]]; then
    if { systemd-inhibit --list | grep -q mat-rootful-ops ; }; then
        :
    else
        systemd-inhibit --what="idle:sleep:shutdown" --who="mat-rootful-ops" \
            --why="Doing important stuff" -- mat "$@"
        exit 0
    fi
fi

if [[ "$(id -u)" == "0" ]]; then
    [[ ! -f "$PREFIX/etc/mat/.mat.lock" ]] && \
        mkdir -p "$PREFIX/etc/mat" && touch "$PREFIX/etc/mat/.mat.lock"

    if (infocmp 2>/dev/null | grep -q smcup) &&
        (infocmp 2>/dev/null | grep -q rmcup); then
            tput_support="y";
        else
            tput_support="n";
    fi

    if [[ "$tput_support" == "y" ]]; then
        locsync="/dev/shm/sync$$"
        echo "" > "$locsync"
        trap clean_draw 0
        draw_bar "$locsync" &
    fi

    exec {MAT_LOCK}<>"$PREFIX/etc/mat/.mat.lock" || \
        { fail_ex "-1" "Couldn't set lock fd." ; }

    pprint "Acquiring lock..."
    flock -x "$MAT_LOCK"
fi

case "$1" in
    unused)
        get_unused_packages 
        ;;
    prune)
        prune_unused_packages
        ;;
    materialize)
        generate_deployment "$2"
        ;;
    relabel)
        relabel_store "$2"
        ;;
    gen_boot)
        booty_bits "$2"
        ;;
    label_boot)
        relabel_boot
        ;;
    pull)
        pull_image
        ;;
    update)
        update_store "$CONTAINER_URL" "$2"
        ;;
    verify)
        verify_store
        ;;
    itemize)
        populate_store
        ;;
    hash)
        hash_store
        ;;
    exch)
        swap_dep "$2"
        ;;
    clear)
        clear_staging
        ;;
    status)
        show_status "${2-}" "${3-}"
        ;;
    rm)
        rm_dep "$2"
        ;;
    new)
        new_dep "$@"
        ;;
    *)
        iprint "$1: Not a known subcommand"
        ;;
esac
